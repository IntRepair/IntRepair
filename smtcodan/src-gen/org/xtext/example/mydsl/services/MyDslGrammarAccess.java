/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnotationLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationLanguage");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementHeaderModelParserRuleCall_0 = (RuleCall)cElementAssignment.eContents().get(0);
		
		/// **
		// * @AnnotationLanguage: top root node of the annotation language
		// * / AnnotationLanguage:
		//	element+=HeaderModel*;
		public ParserRule getRule() { return rule; }

		//element+=HeaderModel*
		public Assignment getElementAssignment() { return cElementAssignment; }

		//HeaderModel
		public RuleCall getElementHeaderModelParserRuleCall_0() { return cElementHeaderModelParserRuleCall_0; }
	}

	public class HeaderModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHeadersAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHeadersSingleLineAnnotationParserRuleCall_0_0 = (RuleCall)cHeadersAssignment_0.eContents().get(0);
		private final RuleCall cMultilineAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodHeaderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// **
		// * @SingleLineAnnotation: entity used for single line annotations
		// * @MultilineAnnotation : entity used for multi line annotations
		// * @MethodHeader        : entity used for recognizing anykind of C/C++ headers
		// * @AttributeDefinition : entity used for recognizing anykind of variable definition
		// * / HeaderModel:
		//	headers+=SingleLineAnnotation | MultilineAnnotation | MethodHeader | AttributeDefinition;
		public ParserRule getRule() { return rule; }

		//headers+=SingleLineAnnotation | MultilineAnnotation | MethodHeader | AttributeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//headers+=SingleLineAnnotation
		public Assignment getHeadersAssignment_0() { return cHeadersAssignment_0; }

		//SingleLineAnnotation
		public RuleCall getHeadersSingleLineAnnotationParserRuleCall_0_0() { return cHeadersSingleLineAnnotationParserRuleCall_0_0; }

		//MultilineAnnotation
		public RuleCall getMultilineAnnotationParserRuleCall_1() { return cMultilineAnnotationParserRuleCall_1; }

		//MethodHeader
		public RuleCall getMethodHeaderParserRuleCall_2() { return cMethodHeaderParserRuleCall_2; }

		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_3() { return cAttributeDefinitionParserRuleCall_3; }
	}

	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAttribute_defAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAttribute_defSYMBOLSParserRuleCall_1_0_0 = (RuleCall)cAttribute_defAssignment_1_0.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExtensionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExtensionKeyWordParserRuleCall_1_2_0 = (RuleCall)cExtensionAssignment_1_2.eContents().get(0);
		private final Assignment cExtension_2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExtension_2ExpressionAttributeParserRuleCall_1_3_0 = (RuleCall)cExtension_2Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cControl000aKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cControl000dKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		/// **
		// * @AttributeDefinition : entity used for recognizing anykind of statement which begins with the simbol #
		// * / AttributeDefinition:
		//	{AttributeDefinition} (attribute_def+=SYMBOLS? " "* extension+=KeyWord extension_2+=ExpressionAttribute) ("\n" |
		//	"\r")*;
		public ParserRule getRule() { return rule; }

		//{AttributeDefinition} (attribute_def+=SYMBOLS? " "* extension+=KeyWord extension_2+=ExpressionAttribute) ("\n" | "\r")*
		public Group getGroup() { return cGroup; }

		//{AttributeDefinition}
		public Action getAttributeDefinitionAction_0() { return cAttributeDefinitionAction_0; }

		//attribute_def+=SYMBOLS? " "* extension+=KeyWord extension_2+=ExpressionAttribute
		public Group getGroup_1() { return cGroup_1; }

		//attribute_def+=SYMBOLS?
		public Assignment getAttribute_defAssignment_1_0() { return cAttribute_defAssignment_1_0; }

		//SYMBOLS
		public RuleCall getAttribute_defSYMBOLSParserRuleCall_1_0_0() { return cAttribute_defSYMBOLSParserRuleCall_1_0_0; }

		//" "*
		public Keyword getSpaceKeyword_1_1() { return cSpaceKeyword_1_1; }

		//extension+=KeyWord
		public Assignment getExtensionAssignment_1_2() { return cExtensionAssignment_1_2; }

		//KeyWord
		public RuleCall getExtensionKeyWordParserRuleCall_1_2_0() { return cExtensionKeyWordParserRuleCall_1_2_0; }

		//extension_2+=ExpressionAttribute
		public Assignment getExtension_2Assignment_1_3() { return cExtension_2Assignment_1_3; }

		//ExpressionAttribute
		public RuleCall getExtension_2ExpressionAttributeParserRuleCall_1_3_0() { return cExtension_2ExpressionAttributeParserRuleCall_1_3_0; }

		//("\n" | "\r")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"\n"
		public Keyword getControl000aKeyword_2_0() { return cControl000aKeyword_2_0; }

		//"\r"
		public Keyword getControl000dKeyword_2_1() { return cControl000dKeyword_2_1; }
	}

	public class ExpressionAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEntityRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbols_attrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSymbols_attrSYMBOLSParserRuleCall_1_1_0 = (RuleCall)cSymbols_attrAssignment_1_1.eContents().get(0);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTailEntityRefParserRuleCall_1_2_0 = (RuleCall)cTailAssignment_1_2.eContents().get(0);
		
		/// **
		// * @ExpressionAttribute : atribute of the AttributeDefinition
		// * / ExpressionAttribute returns Ref:
		//	EntityRef ({Expression.ref=current} symbols_attr+=SYMBOLS tail=EntityRef)*;
		public ParserRule getRule() { return rule; }

		//EntityRef ({Expression.ref=current} symbols_attr+=SYMBOLS tail=EntityRef)*
		public Group getGroup() { return cGroup; }

		//EntityRef
		public RuleCall getEntityRefParserRuleCall_0() { return cEntityRefParserRuleCall_0; }

		//({Expression.ref=current} symbols_attr+=SYMBOLS tail=EntityRef)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.ref=current}
		public Action getExpressionRefAction_1_0() { return cExpressionRefAction_1_0; }

		//symbols_attr+=SYMBOLS
		public Assignment getSymbols_attrAssignment_1_1() { return cSymbols_attrAssignment_1_1; }

		//SYMBOLS
		public RuleCall getSymbols_attrSYMBOLSParserRuleCall_1_1_0() { return cSymbols_attrSYMBOLSParserRuleCall_1_1_0; }

		//tail=EntityRef
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }

		//EntityRef
		public RuleCall getTailEntityRefParserRuleCall_1_2_0() { return cTailEntityRefParserRuleCall_1_2_0; }
	}

	public class MethodHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cName0Assignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_0_0_0 = (RuleCall)cName0Assignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cSpaceKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Keyword cSpaceKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1_0_1_3 = (RuleCall)cGroup_1_0_1.eContents().get(3);
		private final Keyword cSpaceKeyword_1_0_1_4 = (Keyword)cGroup_1_0_1.eContents().get(4);
		private final Assignment cName1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cName1SYMBOLSParserRuleCall_1_0_2_0 = (RuleCall)cName1Assignment_1_0_2.eContents().get(0);
		private final Assignment cExpAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_1_0_3_0 = (RuleCall)cExpAssignment_1_0_3.eContents().get(0);
		private final Assignment cName2Assignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cName2SYMBOLSParserRuleCall_1_0_4_0 = (RuleCall)cName2Assignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cName3Assignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cName3SYMBOLSParserRuleCall_1_1_0_0 = (RuleCall)cName3Assignment_1_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cName4Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cName4SYMBOLSParserRuleCall_1_1_2_0 = (RuleCall)cName4Assignment_1_1_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Assignment cName5Assignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cName5SYMBOLSParserRuleCall_1_1_4_0 = (RuleCall)cName5Assignment_1_1_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_5 = (RuleCall)cGroup_1_1.eContents().get(5);
		private final Assignment cName6Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cName6SYMBOLSParserRuleCall_1_2_0 = (RuleCall)cName6Assignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cControl000aKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cControl000dKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		/// **
		// * @MethodHeader :this recognizes anykind of method headers
		// * / MethodHeader:
		//	{MethodHeader} ((name0=SYMBOLS? (" "? "*"* " "* ID " "?)* name1=SYMBOLS exp+=Expression name2=SYMBOLS) (name3=SYMBOLS?
		//	ID? name4=SYMBOLS? ID? name5=SYMBOLS? ID?) name6=SYMBOLS?) ("\n" | "\r")?;
		public ParserRule getRule() { return rule; }

		//{MethodHeader} ((name0=SYMBOLS? (" "? "*"* " "* ID " "?)* name1=SYMBOLS exp+=Expression name2=SYMBOLS) (name3=SYMBOLS?
		//ID? name4=SYMBOLS? ID? name5=SYMBOLS? ID?) name6=SYMBOLS?) ("\n" | "\r")?
		public Group getGroup() { return cGroup; }

		//{MethodHeader}
		public Action getMethodHeaderAction_0() { return cMethodHeaderAction_0; }

		//(name0=SYMBOLS? (" "? "*"* " "* ID " "?)* name1=SYMBOLS exp+=Expression name2=SYMBOLS) (name3=SYMBOLS? ID?
		//name4=SYMBOLS? ID? name5=SYMBOLS? ID?) name6=SYMBOLS?
		public Group getGroup_1() { return cGroup_1; }

		//name0=SYMBOLS? (" "? "*"* " "* ID " "?)* name1=SYMBOLS exp+=Expression name2=SYMBOLS
		public Group getGroup_1_0() { return cGroup_1_0; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_0_0() { return cName0Assignment_1_0_0; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_0_0_0() { return cName0SYMBOLSParserRuleCall_1_0_0_0; }

		//(" "? "*"* " "* ID " "?)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//" "?
		public Keyword getSpaceKeyword_1_0_1_0() { return cSpaceKeyword_1_0_1_0; }

		//"*"*
		public Keyword getAsteriskKeyword_1_0_1_1() { return cAsteriskKeyword_1_0_1_1; }

		//" "*
		public Keyword getSpaceKeyword_1_0_1_2() { return cSpaceKeyword_1_0_1_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1_3() { return cIDTerminalRuleCall_1_0_1_3; }

		//" "?
		public Keyword getSpaceKeyword_1_0_1_4() { return cSpaceKeyword_1_0_1_4; }

		//name1=SYMBOLS
		public Assignment getName1Assignment_1_0_2() { return cName1Assignment_1_0_2; }

		//SYMBOLS
		public RuleCall getName1SYMBOLSParserRuleCall_1_0_2_0() { return cName1SYMBOLSParserRuleCall_1_0_2_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_0_3() { return cExpAssignment_1_0_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0_3_0() { return cExpExpressionParserRuleCall_1_0_3_0; }

		//name2=SYMBOLS
		public Assignment getName2Assignment_1_0_4() { return cName2Assignment_1_0_4; }

		//SYMBOLS
		public RuleCall getName2SYMBOLSParserRuleCall_1_0_4_0() { return cName2SYMBOLSParserRuleCall_1_0_4_0; }

		//name3=SYMBOLS? ID? name4=SYMBOLS? ID? name5=SYMBOLS? ID?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//name3=SYMBOLS?
		public Assignment getName3Assignment_1_1_0() { return cName3Assignment_1_1_0; }

		//SYMBOLS
		public RuleCall getName3SYMBOLSParserRuleCall_1_1_0_0() { return cName3SYMBOLSParserRuleCall_1_1_0_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }

		//name4=SYMBOLS?
		public Assignment getName4Assignment_1_1_2() { return cName4Assignment_1_1_2; }

		//SYMBOLS
		public RuleCall getName4SYMBOLSParserRuleCall_1_1_2_0() { return cName4SYMBOLSParserRuleCall_1_1_2_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_1_3() { return cIDTerminalRuleCall_1_1_3; }

		//name5=SYMBOLS?
		public Assignment getName5Assignment_1_1_4() { return cName5Assignment_1_1_4; }

		//SYMBOLS
		public RuleCall getName5SYMBOLSParserRuleCall_1_1_4_0() { return cName5SYMBOLSParserRuleCall_1_1_4_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_1_5() { return cIDTerminalRuleCall_1_1_5; }

		//name6=SYMBOLS?
		public Assignment getName6Assignment_1_2() { return cName6Assignment_1_2; }

		//SYMBOLS
		public RuleCall getName6SYMBOLSParserRuleCall_1_2_0() { return cName6SYMBOLSParserRuleCall_1_2_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"\n"
		public Keyword getControl000aKeyword_2_0() { return cControl000aKeyword_2_0; }

		//"\r"
		public Keyword getControl000dKeyword_2_1() { return cControl000dKeyword_2_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEntityRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSymbolsSYMBOLSParserRuleCall_1_1_0 = (RuleCall)cSymbolsAssignment_1_1.eContents().get(0);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTailEntityRefParserRuleCall_1_2_0 = (RuleCall)cTailAssignment_1_2.eContents().get(0);
		
		/// **
		// * @Expression :used for recognizing expresions inside a MethodHeader
		// *               :it contains one recursion on the current
		// * / Expression returns Ref:
		//	EntityRef ({Expression.ref=current} symbols+=SYMBOLS tail=EntityRef)*;
		public ParserRule getRule() { return rule; }

		//EntityRef ({Expression.ref=current} symbols+=SYMBOLS tail=EntityRef)*
		public Group getGroup() { return cGroup; }

		//EntityRef
		public RuleCall getEntityRefParserRuleCall_0() { return cEntityRefParserRuleCall_0; }

		//({Expression.ref=current} symbols+=SYMBOLS tail=EntityRef)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.ref=current}
		public Action getExpressionRefAction_1_0() { return cExpressionRefAction_1_0; }

		//symbols+=SYMBOLS
		public Assignment getSymbolsAssignment_1_1() { return cSymbolsAssignment_1_1; }

		//SYMBOLS
		public RuleCall getSymbolsSYMBOLSParserRuleCall_1_1_0() { return cSymbolsSYMBOLSParserRuleCall_1_1_0; }

		//tail=EntityRef
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }

		//EntityRef
		public RuleCall getTailEntityRefParserRuleCall_1_2_0() { return cTailEntityRefParserRuleCall_1_2_0; }
	}

	public class EntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitySpecialExpressionParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		
		/// **
		// * @EntityRef :@Expression contains @EntityRef, this is a list of entitys
		// * / EntityRef returns Ref:
		//	{EntityRef} entity+=SpecialExpression*;
		public ParserRule getRule() { return rule; }

		//{EntityRef} entity+=SpecialExpression*
		public Group getGroup() { return cGroup; }

		//{EntityRef}
		public Action getEntityRefAction_0() { return cEntityRefAction_0; }

		//entity+=SpecialExpression*
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }

		//SpecialExpression
		public RuleCall getEntitySpecialExpressionParserRuleCall_1_0() { return cEntitySpecialExpressionParserRuleCall_1_0; }
	}

	public class IDSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEntityRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIDSpaceLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSpecialExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// **
		// * @IDSpace :contains a left recursion on the currrent
		// *          :used for identityfing expressions with a space in front
		// * / IDSpace:
		//	EntityRef ({IDSpace.left=current} " "* right=SpecialExpression)*;
		public ParserRule getRule() { return rule; }

		//EntityRef ({IDSpace.left=current} " "* right=SpecialExpression)*
		public Group getGroup() { return cGroup; }

		//EntityRef
		public RuleCall getEntityRefParserRuleCall_0() { return cEntityRefParserRuleCall_0; }

		//({IDSpace.left=current} " "* right=SpecialExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{IDSpace.left=current}
		public Action getIDSpaceLeftAction_1_0() { return cIDSpaceLeftAction_1_0; }

		//" "*
		public Keyword getSpaceKeyword_1_1() { return cSpaceKeyword_1_1; }

		//right=SpecialExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SpecialExpression
		public RuleCall getRightSpecialExpressionParserRuleCall_1_2_0() { return cRightSpecialExpressionParserRuleCall_1_2_0; }
	}

	public class SpecialExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRulesIDTerminalRuleCall_1_0_0 = (RuleCall)cRulesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cName0Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_1_1_0 = (RuleCall)cName0Assignment_1_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cName1Assignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cName1SYMBOLSParserRuleCall_1_2_0_0 = (RuleCall)cName1Assignment_1_2_0.eContents().get(0);
		private final Assignment cName2Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cName2SYMBOLSParserRuleCall_1_2_1_0 = (RuleCall)cName2Assignment_1_2_1.eContents().get(0);
		private final Assignment cName3Assignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cName3SYMBOLSParserRuleCall_1_2_2_0 = (RuleCall)cName3Assignment_1_2_2.eContents().get(0);
		private final Assignment cName4Assignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cName4SYMBOLSParserRuleCall_1_2_3_0 = (RuleCall)cName4Assignment_1_2_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_2_4 = (RuleCall)cGroup_1_2.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		/// **
		// * @SpecialExpression :expressions containing stars
		// * / SpecialExpression:
		//	{Entity} (rules+=ID | "**" name0=SYMBOLS? ID? | name1=SYMBOLS name2=SYMBOLS? name3=SYMBOLS? name4=SYMBOLS? ID? | INT);
		public ParserRule getRule() { return rule; }

		//{Entity} (rules+=ID | "**" name0=SYMBOLS? ID? | name1=SYMBOLS name2=SYMBOLS? name3=SYMBOLS? name4=SYMBOLS? ID? | INT)
		public Group getGroup() { return cGroup; }

		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }

		//rules+=ID | "**" name0=SYMBOLS? ID? | name1=SYMBOLS name2=SYMBOLS? name3=SYMBOLS? name4=SYMBOLS? ID? | INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//rules+=ID
		public Assignment getRulesAssignment_1_0() { return cRulesAssignment_1_0; }

		//ID
		public RuleCall getRulesIDTerminalRuleCall_1_0_0() { return cRulesIDTerminalRuleCall_1_0_0; }

		//"**" name0=SYMBOLS? ID?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1_0() { return cAsteriskAsteriskKeyword_1_1_0; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_1_1() { return cName0Assignment_1_1_1; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_1_1_0() { return cName0SYMBOLSParserRuleCall_1_1_1_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_1_2() { return cIDTerminalRuleCall_1_1_2; }

		//name1=SYMBOLS name2=SYMBOLS? name3=SYMBOLS? name4=SYMBOLS? ID?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//name1=SYMBOLS
		public Assignment getName1Assignment_1_2_0() { return cName1Assignment_1_2_0; }

		//SYMBOLS
		public RuleCall getName1SYMBOLSParserRuleCall_1_2_0_0() { return cName1SYMBOLSParserRuleCall_1_2_0_0; }

		//name2=SYMBOLS?
		public Assignment getName2Assignment_1_2_1() { return cName2Assignment_1_2_1; }

		//SYMBOLS
		public RuleCall getName2SYMBOLSParserRuleCall_1_2_1_0() { return cName2SYMBOLSParserRuleCall_1_2_1_0; }

		//name3=SYMBOLS?
		public Assignment getName3Assignment_1_2_2() { return cName3Assignment_1_2_2; }

		//SYMBOLS
		public RuleCall getName3SYMBOLSParserRuleCall_1_2_2_0() { return cName3SYMBOLSParserRuleCall_1_2_2_0; }

		//name4=SYMBOLS?
		public Assignment getName4Assignment_1_2_3() { return cName4Assignment_1_2_3; }

		//SYMBOLS
		public RuleCall getName4SYMBOLSParserRuleCall_1_2_3_0() { return cName4SYMBOLSParserRuleCall_1_2_3_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_2_4() { return cIDTerminalRuleCall_1_2_4; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }
	}

	public class SpaceIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpaceID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpaceIDAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cExprSpaceKeyword_1_0_0 = (Keyword)cExprAssignment_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// **
		// * @SpaceID :used for recognizing spaces followed be ID
		// * / SpaceID:
		//	{SpaceID} (expr+=" "* ID?)*;
		public ParserRule getRule() { return rule; }

		//{SpaceID} (expr+=" "* ID?)*
		public Group getGroup() { return cGroup; }

		//{SpaceID}
		public Action getSpaceIDAction_0() { return cSpaceIDAction_0; }

		//(expr+=" "* ID?)*
		public Group getGroup_1() { return cGroup_1; }

		//expr+=" "*
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }

		//" "
		public Keyword getExprSpaceKeyword_1_0_0() { return cExprSpaceKeyword_1_0_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class MultilineAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultilineAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultilineAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cRuleSolidusAsteriskCommercialAtSpaceKeyword_1_0_0_0 = (Keyword)cRuleAssignment_1_0_0.eContents().get(0);
		private final Keyword cAsteriskSpaceKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFunctionAnnotationAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFunctionAnnotationFunctionAnnotationParserRuleCall_1_0_2_0 = (RuleCall)cFunctionAnnotationAssignment_1_0_2.eContents().get(0);
		private final Keyword cControl000aKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cSpaceCommercialAtAsteriskSolidusKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cName0Assignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_0_5_0 = (RuleCall)cName0Assignment_1_0_5.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cSpaceKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cCommercialAtAsteriskSolidusKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cName1Assignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cName1SYMBOLSParserRuleCall_1_1_4_0 = (RuleCall)cName1Assignment_1_1_4.eContents().get(0);
		private final Alternatives cAlternatives_1_1_5 = (Alternatives)cGroup_1_1.eContents().get(5);
		private final Keyword cControl000aKeyword_1_1_5_0 = (Keyword)cAlternatives_1_1_5.eContents().get(0);
		private final Keyword cControl000dKeyword_1_1_5_1 = (Keyword)cAlternatives_1_1_5.eContents().get(1);
		
		/// **
		// * @MultilineAnnotation :used for adding multiline annotations
		// * / MultilineAnnotation:
		//	{MultilineAnnotation} (rule+="/ *@ "? "* "? functionAnnotation=FunctionAnnotation "\n"? " @* /"? name0=SYMBOLS? | "*"
		//	" " " " "@* /" name1=SYMBOLS? ("\n" | "\r")?);
		public ParserRule getRule() { return rule; }

		//{MultilineAnnotation} (rule+="/ *@ "? "* "? functionAnnotation=FunctionAnnotation "\n"? " @* /"? name0=SYMBOLS? | "*" " "
		//" " "@* /" name1=SYMBOLS? ("\n" | "\r")?)
		public Group getGroup() { return cGroup; }

		//{MultilineAnnotation}
		public Action getMultilineAnnotationAction_0() { return cMultilineAnnotationAction_0; }

		//rule+="/ *@ "? "* "? functionAnnotation=FunctionAnnotation "\n"? " @* /"? name0=SYMBOLS? | "*" " " " " "@* /"
		//name1=SYMBOLS? ("\n" | "\r")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//rule+="/ *@ "? "* "? functionAnnotation=FunctionAnnotation "\n"? " @* /"? name0=SYMBOLS?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//rule+="/ *@ "?
		public Assignment getRuleAssignment_1_0_0() { return cRuleAssignment_1_0_0; }

		//"/ *@ "
		public Keyword getRuleSolidusAsteriskCommercialAtSpaceKeyword_1_0_0_0() { return cRuleSolidusAsteriskCommercialAtSpaceKeyword_1_0_0_0; }

		//"* "?
		public Keyword getAsteriskSpaceKeyword_1_0_1() { return cAsteriskSpaceKeyword_1_0_1; }

		//functionAnnotation=FunctionAnnotation
		public Assignment getFunctionAnnotationAssignment_1_0_2() { return cFunctionAnnotationAssignment_1_0_2; }

		//FunctionAnnotation
		public RuleCall getFunctionAnnotationFunctionAnnotationParserRuleCall_1_0_2_0() { return cFunctionAnnotationFunctionAnnotationParserRuleCall_1_0_2_0; }

		//"\n"?
		public Keyword getControl000aKeyword_1_0_3() { return cControl000aKeyword_1_0_3; }

		//" @* /"?
		public Keyword getSpaceCommercialAtAsteriskSolidusKeyword_1_0_4() { return cSpaceCommercialAtAsteriskSolidusKeyword_1_0_4; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_0_5() { return cName0Assignment_1_0_5; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_0_5_0() { return cName0SYMBOLSParserRuleCall_1_0_5_0; }

		//"*" " " " " "@* /" name1=SYMBOLS? ("\n" | "\r")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//" "
		public Keyword getSpaceKeyword_1_1_1() { return cSpaceKeyword_1_1_1; }

		//" "
		public Keyword getSpaceKeyword_1_1_2() { return cSpaceKeyword_1_1_2; }

		//"@* /"
		public Keyword getCommercialAtAsteriskSolidusKeyword_1_1_3() { return cCommercialAtAsteriskSolidusKeyword_1_1_3; }

		//name1=SYMBOLS?
		public Assignment getName1Assignment_1_1_4() { return cName1Assignment_1_1_4; }

		//SYMBOLS
		public RuleCall getName1SYMBOLSParserRuleCall_1_1_4_0() { return cName1SYMBOLSParserRuleCall_1_1_4_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_1_5() { return cAlternatives_1_1_5; }

		//"\n"
		public Keyword getControl000aKeyword_1_1_5_0() { return cControl000aKeyword_1_1_5_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_1_5_1() { return cControl000dKeyword_1_1_5_1; }
	}

	public class FunctionAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cResultAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cResultFunctionKeyword_1_0_0_0 = (Keyword)cResultAssignment_1_0_0.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFunctionTypeFunctionTypeEnumRuleCall_1_0_1_0 = (RuleCall)cFunctionTypeAssignment_1_0_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cLevelAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final Alternatives cLevelAlternatives_1_0_3_0 = (Alternatives)cLevelAssignment_1_0_3.eContents().get(0);
		private final Keyword cLevelHKeyword_1_0_3_0_0 = (Keyword)cLevelAlternatives_1_0_3_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_0_3_0_1 = (Keyword)cLevelAlternatives_1_0_3_0.eContents().get(1);
		private final Assignment cName0Assignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_0_4_0 = (RuleCall)cName0Assignment_1_0_4.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_0_5_0 = (RuleCall)cNameCommentAssignment_1_0_5.eContents().get(0);
		private final Alternatives cAlternatives_1_0_6 = (Alternatives)cGroup_1_0.eContents().get(6);
		private final Keyword cControl000aKeyword_1_0_6_0 = (Keyword)cAlternatives_1_0_6.eContents().get(0);
		private final Keyword cControl000dKeyword_1_0_6_1 = (Keyword)cAlternatives_1_0_6.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cParameterKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParameterIDTerminalRuleCall_1_1_1_0 = (RuleCall)cParameterAssignment_1_1_1.eContents().get(0);
		private final Assignment cName0Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_1_2_0 = (RuleCall)cName0Assignment_1_1_2.eContents().get(0);
		private final Assignment cSecurityTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cSecurityTypeSecurityTypeEnumRuleCall_1_1_3_0 = (RuleCall)cSecurityTypeAssignment_1_1_3.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLevelAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final Alternatives cLevelAlternatives_1_1_5_0 = (Alternatives)cLevelAssignment_1_1_5.eContents().get(0);
		private final Keyword cLevelHKeyword_1_1_5_0_0 = (Keyword)cLevelAlternatives_1_1_5_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_1_5_0_1 = (Keyword)cLevelAlternatives_1_1_5_0.eContents().get(1);
		private final Assignment cName1Assignment_1_1_6 = (Assignment)cGroup_1_1.eContents().get(6);
		private final RuleCall cName1SYMBOLSParserRuleCall_1_1_6_0 = (RuleCall)cName1Assignment_1_1_6.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_1_7 = (Assignment)cGroup_1_1.eContents().get(7);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_1_7_0 = (RuleCall)cNameCommentAssignment_1_1_7.eContents().get(0);
		private final Alternatives cAlternatives_1_1_8 = (Alternatives)cGroup_1_1.eContents().get(8);
		private final Keyword cControl000aKeyword_1_1_8_0 = (Keyword)cAlternatives_1_1_8.eContents().get(0);
		private final Keyword cControl000dKeyword_1_1_8_1 = (Keyword)cAlternatives_1_1_8.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cPreStepKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPreStepAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPreStepIDTerminalRuleCall_1_2_1_0 = (RuleCall)cPreStepAssignment_1_2_1.eContents().get(0);
		private final Assignment cName0Assignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_2_2_0 = (RuleCall)cName0Assignment_1_2_2.eContents().get(0);
		private final Keyword cSpaceKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cLevelAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final Alternatives cLevelAlternatives_1_2_4_0 = (Alternatives)cLevelAssignment_1_2_4.eContents().get(0);
		private final Keyword cLevelHKeyword_1_2_4_0_0 = (Keyword)cLevelAlternatives_1_2_4_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_2_4_0_1 = (Keyword)cLevelAlternatives_1_2_4_0.eContents().get(1);
		private final Assignment cName2Assignment_1_2_5 = (Assignment)cGroup_1_2.eContents().get(5);
		private final RuleCall cName2SYMBOLSParserRuleCall_1_2_5_0 = (RuleCall)cName2Assignment_1_2_5.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_2_6 = (Assignment)cGroup_1_2.eContents().get(6);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_2_6_0 = (RuleCall)cNameCommentAssignment_1_2_6.eContents().get(0);
		private final Alternatives cAlternatives_1_2_7 = (Alternatives)cGroup_1_2.eContents().get(7);
		private final Keyword cControl000aKeyword_1_2_7_0 = (Keyword)cAlternatives_1_2_7.eContents().get(0);
		private final Keyword cControl000dKeyword_1_2_7_1 = (Keyword)cAlternatives_1_2_7.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cPostStepKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cPostStepAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cPostStepIDTerminalRuleCall_1_3_1_0 = (RuleCall)cPostStepAssignment_1_3_1.eContents().get(0);
		private final Assignment cName0Assignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_3_2_0 = (RuleCall)cName0Assignment_1_3_2.eContents().get(0);
		private final Keyword cSpaceKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Assignment cLevelAssignment_1_3_4 = (Assignment)cGroup_1_3.eContents().get(4);
		private final Alternatives cLevelAlternatives_1_3_4_0 = (Alternatives)cLevelAssignment_1_3_4.eContents().get(0);
		private final Keyword cLevelHKeyword_1_3_4_0_0 = (Keyword)cLevelAlternatives_1_3_4_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_3_4_0_1 = (Keyword)cLevelAlternatives_1_3_4_0.eContents().get(1);
		private final Assignment cName3Assignment_1_3_5 = (Assignment)cGroup_1_3.eContents().get(5);
		private final RuleCall cName3SYMBOLSParserRuleCall_1_3_5_0 = (RuleCall)cName3Assignment_1_3_5.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_3_6 = (Assignment)cGroup_1_3.eContents().get(6);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_3_6_0 = (RuleCall)cNameCommentAssignment_1_3_6.eContents().get(0);
		private final Alternatives cAlternatives_1_3_7 = (Alternatives)cGroup_1_3.eContents().get(7);
		private final Keyword cControl000aKeyword_1_3_7_0 = (Keyword)cAlternatives_1_3_7.eContents().get(0);
		private final Keyword cControl000dKeyword_1_3_7_1 = (Keyword)cAlternatives_1_3_7.eContents().get(1);
		
		/// **
		// * @FunctionAnnotation :used for function annotations
		// * / FunctionAnnotation:
		//	{FunctionAnnotation} (result+="@function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS?
		//	nameComment=ID? ("\n" | "\r")? // supported without space before confidential and sensitive
		//	//for annotating pre and post functions
		//	| "@parameter " parameter=ID name0=SYMBOLS? securityType=SecurityType? " "? level=("H" | "L")? name1=SYMBOLS?
		//	nameComment=ID? ("\n" | "\r")? | "@preStep " preStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name2=SYMBOLS?
		//	nameComment=ID? ("\n" | "\r")? | "@postStep " postStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name3=SYMBOLS?
		//	nameComment=ID? ("\n" | "\r")?);
		public ParserRule getRule() { return rule; }

		//{FunctionAnnotation} (result+="@function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")? // supported without space before confidential and sensitive
		////for annotating pre and post functions
		//| "@parameter " parameter=ID name0=SYMBOLS? securityType=SecurityType? " "? level=("H" | "L")? name1=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")? | "@preStep " preStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name2=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")? | "@postStep " postStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name3=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")?)
		public Group getGroup() { return cGroup; }

		//{FunctionAnnotation}
		public Action getFunctionAnnotationAction_0() { return cFunctionAnnotationAction_0; }

		//result+="@function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS? nameComment=ID? ("\n" | "\r")? // supported without space before confidential and sensitive
		////for annotating pre and post functions
		//| "@parameter " parameter=ID name0=SYMBOLS? securityType=SecurityType? " "? level=("H" | "L")? name1=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")? | "@preStep " preStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name2=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")? | "@postStep " postStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name3=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//result+="@function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS? nameComment=ID? ("\n" | "\r")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//result+="@function "
		public Assignment getResultAssignment_1_0_0() { return cResultAssignment_1_0_0; }

		//"@function "
		public Keyword getResultFunctionKeyword_1_0_0_0() { return cResultFunctionKeyword_1_0_0_0; }

		//functionType=FunctionType
		public Assignment getFunctionTypeAssignment_1_0_1() { return cFunctionTypeAssignment_1_0_1; }

		//FunctionType
		public RuleCall getFunctionTypeFunctionTypeEnumRuleCall_1_0_1_0() { return cFunctionTypeFunctionTypeEnumRuleCall_1_0_1_0; }

		//" "?
		public Keyword getSpaceKeyword_1_0_2() { return cSpaceKeyword_1_0_2; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_0_3() { return cLevelAssignment_1_0_3; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_0_3_0() { return cLevelAlternatives_1_0_3_0; }

		//"H"
		public Keyword getLevelHKeyword_1_0_3_0_0() { return cLevelHKeyword_1_0_3_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_0_3_0_1() { return cLevelLKeyword_1_0_3_0_1; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_0_4() { return cName0Assignment_1_0_4; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_0_4_0() { return cName0SYMBOLSParserRuleCall_1_0_4_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_0_5() { return cNameCommentAssignment_1_0_5; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_0_5_0() { return cNameCommentIDTerminalRuleCall_1_0_5_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_0_6() { return cAlternatives_1_0_6; }

		//"\n"
		public Keyword getControl000aKeyword_1_0_6_0() { return cControl000aKeyword_1_0_6_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_0_6_1() { return cControl000dKeyword_1_0_6_1; }

		//"@parameter " parameter=ID name0=SYMBOLS? securityType=SecurityType? " "? level=("H" | "L")? name1=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"@parameter "
		public Keyword getParameterKeyword_1_1_0() { return cParameterKeyword_1_1_0; }

		//parameter=ID
		public Assignment getParameterAssignment_1_1_1() { return cParameterAssignment_1_1_1; }

		//ID
		public RuleCall getParameterIDTerminalRuleCall_1_1_1_0() { return cParameterIDTerminalRuleCall_1_1_1_0; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_1_2() { return cName0Assignment_1_1_2; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_1_2_0() { return cName0SYMBOLSParserRuleCall_1_1_2_0; }

		//securityType=SecurityType?
		public Assignment getSecurityTypeAssignment_1_1_3() { return cSecurityTypeAssignment_1_1_3; }

		//SecurityType
		public RuleCall getSecurityTypeSecurityTypeEnumRuleCall_1_1_3_0() { return cSecurityTypeSecurityTypeEnumRuleCall_1_1_3_0; }

		//" "?
		public Keyword getSpaceKeyword_1_1_4() { return cSpaceKeyword_1_1_4; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_1_5() { return cLevelAssignment_1_1_5; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_1_5_0() { return cLevelAlternatives_1_1_5_0; }

		//"H"
		public Keyword getLevelHKeyword_1_1_5_0_0() { return cLevelHKeyword_1_1_5_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_1_5_0_1() { return cLevelLKeyword_1_1_5_0_1; }

		//name1=SYMBOLS?
		public Assignment getName1Assignment_1_1_6() { return cName1Assignment_1_1_6; }

		//SYMBOLS
		public RuleCall getName1SYMBOLSParserRuleCall_1_1_6_0() { return cName1SYMBOLSParserRuleCall_1_1_6_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_1_7() { return cNameCommentAssignment_1_1_7; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_1_7_0() { return cNameCommentIDTerminalRuleCall_1_1_7_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_1_8() { return cAlternatives_1_1_8; }

		//"\n"
		public Keyword getControl000aKeyword_1_1_8_0() { return cControl000aKeyword_1_1_8_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_1_8_1() { return cControl000dKeyword_1_1_8_1; }

		//"@preStep " preStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name2=SYMBOLS? nameComment=ID? ("\n" | "\r")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"@preStep "
		public Keyword getPreStepKeyword_1_2_0() { return cPreStepKeyword_1_2_0; }

		//preStep=ID
		public Assignment getPreStepAssignment_1_2_1() { return cPreStepAssignment_1_2_1; }

		//ID
		public RuleCall getPreStepIDTerminalRuleCall_1_2_1_0() { return cPreStepIDTerminalRuleCall_1_2_1_0; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_2_2() { return cName0Assignment_1_2_2; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_2_2_0() { return cName0SYMBOLSParserRuleCall_1_2_2_0; }

		//" "?
		public Keyword getSpaceKeyword_1_2_3() { return cSpaceKeyword_1_2_3; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_2_4() { return cLevelAssignment_1_2_4; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_2_4_0() { return cLevelAlternatives_1_2_4_0; }

		//"H"
		public Keyword getLevelHKeyword_1_2_4_0_0() { return cLevelHKeyword_1_2_4_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_2_4_0_1() { return cLevelLKeyword_1_2_4_0_1; }

		//name2=SYMBOLS?
		public Assignment getName2Assignment_1_2_5() { return cName2Assignment_1_2_5; }

		//SYMBOLS
		public RuleCall getName2SYMBOLSParserRuleCall_1_2_5_0() { return cName2SYMBOLSParserRuleCall_1_2_5_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_2_6() { return cNameCommentAssignment_1_2_6; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_2_6_0() { return cNameCommentIDTerminalRuleCall_1_2_6_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_2_7() { return cAlternatives_1_2_7; }

		//"\n"
		public Keyword getControl000aKeyword_1_2_7_0() { return cControl000aKeyword_1_2_7_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_2_7_1() { return cControl000dKeyword_1_2_7_1; }

		//"@postStep " postStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name3=SYMBOLS? nameComment=ID? ("\n" | "\r")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"@postStep "
		public Keyword getPostStepKeyword_1_3_0() { return cPostStepKeyword_1_3_0; }

		//postStep=ID
		public Assignment getPostStepAssignment_1_3_1() { return cPostStepAssignment_1_3_1; }

		//ID
		public RuleCall getPostStepIDTerminalRuleCall_1_3_1_0() { return cPostStepIDTerminalRuleCall_1_3_1_0; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_3_2() { return cName0Assignment_1_3_2; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_3_2_0() { return cName0SYMBOLSParserRuleCall_1_3_2_0; }

		//" "?
		public Keyword getSpaceKeyword_1_3_3() { return cSpaceKeyword_1_3_3; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_3_4() { return cLevelAssignment_1_3_4; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_3_4_0() { return cLevelAlternatives_1_3_4_0; }

		//"H"
		public Keyword getLevelHKeyword_1_3_4_0_0() { return cLevelHKeyword_1_3_4_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_3_4_0_1() { return cLevelLKeyword_1_3_4_0_1; }

		//name3=SYMBOLS?
		public Assignment getName3Assignment_1_3_5() { return cName3Assignment_1_3_5; }

		//SYMBOLS
		public RuleCall getName3SYMBOLSParserRuleCall_1_3_5_0() { return cName3SYMBOLSParserRuleCall_1_3_5_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_3_6() { return cNameCommentAssignment_1_3_6; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_3_6_0() { return cNameCommentIDTerminalRuleCall_1_3_6_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_3_7() { return cAlternatives_1_3_7; }

		//"\n"
		public Keyword getControl000aKeyword_1_3_7_0() { return cControl000aKeyword_1_3_7_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_3_7_1() { return cControl000dKeyword_1_3_7_1; }
	}

	public class SingleLineAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleLineAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingleLineAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cResultAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cResultFunctionKeyword_1_0_0_0 = (Keyword)cResultAssignment_1_0_0.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFunctionTypeFunctionTypeEnumRuleCall_1_0_1_0 = (RuleCall)cFunctionTypeAssignment_1_0_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cLevelAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final Alternatives cLevelAlternatives_1_0_3_0 = (Alternatives)cLevelAssignment_1_0_3.eContents().get(0);
		private final Keyword cLevelHKeyword_1_0_3_0_0 = (Keyword)cLevelAlternatives_1_0_3_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_0_3_0_1 = (Keyword)cLevelAlternatives_1_0_3_0.eContents().get(1);
		private final Assignment cName0Assignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cName0SYMBOLSParserRuleCall_1_0_4_0 = (RuleCall)cName0Assignment_1_0_4.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_0_5_0 = (RuleCall)cNameCommentAssignment_1_0_5.eContents().get(0);
		private final Alternatives cAlternatives_1_0_6 = (Alternatives)cGroup_1_0.eContents().get(6);
		private final Keyword cControl000aKeyword_1_0_6_0 = (Keyword)cAlternatives_1_0_6.eContents().get(0);
		private final Keyword cControl000dKeyword_1_0_6_1 = (Keyword)cAlternatives_1_0_6.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cParameterKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParameterIDTerminalRuleCall_1_1_1_0 = (RuleCall)cParameterAssignment_1_1_1.eContents().get(0);
		private final Assignment cSecurityTypeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSecurityTypeSecurityTypeEnumRuleCall_1_1_2_0 = (RuleCall)cSecurityTypeAssignment_1_1_2.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cLevelAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final Alternatives cLevelAlternatives_1_1_4_0 = (Alternatives)cLevelAssignment_1_1_4.eContents().get(0);
		private final Keyword cLevelHKeyword_1_1_4_0_0 = (Keyword)cLevelAlternatives_1_1_4_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_1_4_0_1 = (Keyword)cLevelAlternatives_1_1_4_0.eContents().get(1);
		private final Assignment cNameCommentAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_1_5_0 = (RuleCall)cNameCommentAssignment_1_1_5.eContents().get(0);
		private final Alternatives cAlternatives_1_1_6 = (Alternatives)cGroup_1_1.eContents().get(6);
		private final Keyword cControl000aKeyword_1_1_6_0 = (Keyword)cAlternatives_1_1_6.eContents().get(0);
		private final Keyword cControl000dKeyword_1_1_6_1 = (Keyword)cAlternatives_1_1_6.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cVariableKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVariableAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_2_1_0 = (RuleCall)cVariableAssignment_1_2_1.eContents().get(0);
		private final Assignment cSecurityTypeAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSecurityTypeSecurityTypeEnumRuleCall_1_2_2_0 = (RuleCall)cSecurityTypeAssignment_1_2_2.eContents().get(0);
		private final Keyword cSpaceKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cLevelAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final Alternatives cLevelAlternatives_1_2_4_0 = (Alternatives)cLevelAssignment_1_2_4.eContents().get(0);
		private final Keyword cLevelHKeyword_1_2_4_0_0 = (Keyword)cLevelAlternatives_1_2_4_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_2_4_0_1 = (Keyword)cLevelAlternatives_1_2_4_0.eContents().get(1);
		private final Assignment cNameCommentAssignment_1_2_5 = (Assignment)cGroup_1_2.eContents().get(5);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_2_5_0 = (RuleCall)cNameCommentAssignment_1_2_5.eContents().get(0);
		private final Alternatives cAlternatives_1_2_6 = (Alternatives)cGroup_1_2.eContents().get(6);
		private final Keyword cControl000aKeyword_1_2_6_0 = (Keyword)cAlternatives_1_2_6.eContents().get(0);
		private final Keyword cControl000dKeyword_1_2_6_1 = (Keyword)cAlternatives_1_2_6.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cPreStepKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cPreStepAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cPreStepIDTerminalRuleCall_1_3_1_0 = (RuleCall)cPreStepAssignment_1_3_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cLevelAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final Alternatives cLevelAlternatives_1_3_3_0 = (Alternatives)cLevelAssignment_1_3_3.eContents().get(0);
		private final Keyword cLevelHKeyword_1_3_3_0_0 = (Keyword)cLevelAlternatives_1_3_3_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_3_3_0_1 = (Keyword)cLevelAlternatives_1_3_3_0.eContents().get(1);
		private final Assignment cName2Assignment_1_3_4 = (Assignment)cGroup_1_3.eContents().get(4);
		private final RuleCall cName2SYMBOLSParserRuleCall_1_3_4_0 = (RuleCall)cName2Assignment_1_3_4.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_3_5 = (Assignment)cGroup_1_3.eContents().get(5);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_3_5_0 = (RuleCall)cNameCommentAssignment_1_3_5.eContents().get(0);
		private final Alternatives cAlternatives_1_3_6 = (Alternatives)cGroup_1_3.eContents().get(6);
		private final Keyword cControl000aKeyword_1_3_6_0 = (Keyword)cAlternatives_1_3_6.eContents().get(0);
		private final Keyword cControl000dKeyword_1_3_6_1 = (Keyword)cAlternatives_1_3_6.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cPostStepKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cPostStepAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cPostStepIDTerminalRuleCall_1_4_1_0 = (RuleCall)cPostStepAssignment_1_4_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Assignment cLevelAssignment_1_4_3 = (Assignment)cGroup_1_4.eContents().get(3);
		private final Alternatives cLevelAlternatives_1_4_3_0 = (Alternatives)cLevelAssignment_1_4_3.eContents().get(0);
		private final Keyword cLevelHKeyword_1_4_3_0_0 = (Keyword)cLevelAlternatives_1_4_3_0.eContents().get(0);
		private final Keyword cLevelLKeyword_1_4_3_0_1 = (Keyword)cLevelAlternatives_1_4_3_0.eContents().get(1);
		private final Assignment cName3Assignment_1_4_4 = (Assignment)cGroup_1_4.eContents().get(4);
		private final RuleCall cName3SYMBOLSParserRuleCall_1_4_4_0 = (RuleCall)cName3Assignment_1_4_4.eContents().get(0);
		private final Assignment cNameCommentAssignment_1_4_5 = (Assignment)cGroup_1_4.eContents().get(5);
		private final RuleCall cNameCommentIDTerminalRuleCall_1_4_5_0 = (RuleCall)cNameCommentAssignment_1_4_5.eContents().get(0);
		private final Alternatives cAlternatives_1_4_6 = (Alternatives)cGroup_1_4.eContents().get(6);
		private final Keyword cControl000aKeyword_1_4_6_0 = (Keyword)cAlternatives_1_4_6.eContents().get(0);
		private final Keyword cControl000dKeyword_1_4_6_1 = (Keyword)cAlternatives_1_4_6.eContents().get(1);
		
		/// **
		// * @SingleLineAnnotation :used for adding single line annotations
		// * / SingleLineAnnotation:
		//	{SingleLineAnnotation} (result+="//@ @function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS?
		//	nameComment=ID? ("\n" | "\r")* // supported without space before confidential and sensitive
		//	//for annotating pre and post functions
		//	| "//@ @parameter " parameter=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
		//	"//@ @variable " variable=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
		//	"//@ @preStep " preStep=ID " "? level=("H" | "L")? name2=SYMBOLS? nameComment=ID? ("\n" | "\r")* | "//@ @postStep "
		//	postStep=ID " "? level=("H" | "L")? name3=SYMBOLS? nameComment=ID? ("\n" | "\r")*);
		public ParserRule getRule() { return rule; }

		//{SingleLineAnnotation} (result+="//@ @function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS?
		//nameComment=ID? ("\n" | "\r")* // supported without space before confidential and sensitive
		////for annotating pre and post functions
		//| "//@ @parameter " parameter=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
		//"//@ @variable " variable=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
		//"//@ @preStep " preStep=ID " "? level=("H" | "L")? name2=SYMBOLS? nameComment=ID? ("\n" | "\r")* | "//@ @postStep "
		//postStep=ID " "? level=("H" | "L")? name3=SYMBOLS? nameComment=ID? ("\n" | "\r")*)
		public Group getGroup() { return cGroup; }

		//{SingleLineAnnotation}
		public Action getSingleLineAnnotationAction_0() { return cSingleLineAnnotationAction_0; }

		//result+="//@ @function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS? nameComment=ID? ("\n" | "\r")* // supported without space before confidential and sensitive
		////for annotating pre and post functions
		//| "//@ @parameter " parameter=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
		//"//@ @variable " variable=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
		//"//@ @preStep " preStep=ID " "? level=("H" | "L")? name2=SYMBOLS? nameComment=ID? ("\n" | "\r")* | "//@ @postStep "
		//postStep=ID " "? level=("H" | "L")? name3=SYMBOLS? nameComment=ID? ("\n" | "\r")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//result+="//@ @function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS? nameComment=ID? ("\n" | "\r")*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//result+="//@ @function "
		public Assignment getResultAssignment_1_0_0() { return cResultAssignment_1_0_0; }

		//"//@ @function "
		public Keyword getResultFunctionKeyword_1_0_0_0() { return cResultFunctionKeyword_1_0_0_0; }

		//functionType=FunctionType
		public Assignment getFunctionTypeAssignment_1_0_1() { return cFunctionTypeAssignment_1_0_1; }

		//FunctionType
		public RuleCall getFunctionTypeFunctionTypeEnumRuleCall_1_0_1_0() { return cFunctionTypeFunctionTypeEnumRuleCall_1_0_1_0; }

		//" "?
		public Keyword getSpaceKeyword_1_0_2() { return cSpaceKeyword_1_0_2; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_0_3() { return cLevelAssignment_1_0_3; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_0_3_0() { return cLevelAlternatives_1_0_3_0; }

		//"H"
		public Keyword getLevelHKeyword_1_0_3_0_0() { return cLevelHKeyword_1_0_3_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_0_3_0_1() { return cLevelLKeyword_1_0_3_0_1; }

		//name0=SYMBOLS?
		public Assignment getName0Assignment_1_0_4() { return cName0Assignment_1_0_4; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_1_0_4_0() { return cName0SYMBOLSParserRuleCall_1_0_4_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_0_5() { return cNameCommentAssignment_1_0_5; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_0_5_0() { return cNameCommentIDTerminalRuleCall_1_0_5_0; }

		//("\n" | "\r")*
		public Alternatives getAlternatives_1_0_6() { return cAlternatives_1_0_6; }

		//"\n"
		public Keyword getControl000aKeyword_1_0_6_0() { return cControl000aKeyword_1_0_6_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_0_6_1() { return cControl000dKeyword_1_0_6_1; }

		//"//@ @parameter " parameter=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"//@ @parameter "
		public Keyword getParameterKeyword_1_1_0() { return cParameterKeyword_1_1_0; }

		//parameter=ID
		public Assignment getParameterAssignment_1_1_1() { return cParameterAssignment_1_1_1; }

		//ID
		public RuleCall getParameterIDTerminalRuleCall_1_1_1_0() { return cParameterIDTerminalRuleCall_1_1_1_0; }

		//securityType=SecurityType?
		public Assignment getSecurityTypeAssignment_1_1_2() { return cSecurityTypeAssignment_1_1_2; }

		//SecurityType
		public RuleCall getSecurityTypeSecurityTypeEnumRuleCall_1_1_2_0() { return cSecurityTypeSecurityTypeEnumRuleCall_1_1_2_0; }

		//" "?
		public Keyword getSpaceKeyword_1_1_3() { return cSpaceKeyword_1_1_3; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_1_4() { return cLevelAssignment_1_1_4; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_1_4_0() { return cLevelAlternatives_1_1_4_0; }

		//"H"
		public Keyword getLevelHKeyword_1_1_4_0_0() { return cLevelHKeyword_1_1_4_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_1_4_0_1() { return cLevelLKeyword_1_1_4_0_1; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_1_5() { return cNameCommentAssignment_1_1_5; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_1_5_0() { return cNameCommentIDTerminalRuleCall_1_1_5_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_1_6() { return cAlternatives_1_1_6; }

		//"\n"
		public Keyword getControl000aKeyword_1_1_6_0() { return cControl000aKeyword_1_1_6_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_1_6_1() { return cControl000dKeyword_1_1_6_1; }

		//"//@ @variable " variable=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"//@ @variable "
		public Keyword getVariableKeyword_1_2_0() { return cVariableKeyword_1_2_0; }

		//variable=ID
		public Assignment getVariableAssignment_1_2_1() { return cVariableAssignment_1_2_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_2_1_0() { return cVariableIDTerminalRuleCall_1_2_1_0; }

		//securityType=SecurityType?
		public Assignment getSecurityTypeAssignment_1_2_2() { return cSecurityTypeAssignment_1_2_2; }

		//SecurityType
		public RuleCall getSecurityTypeSecurityTypeEnumRuleCall_1_2_2_0() { return cSecurityTypeSecurityTypeEnumRuleCall_1_2_2_0; }

		//" "?
		public Keyword getSpaceKeyword_1_2_3() { return cSpaceKeyword_1_2_3; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_2_4() { return cLevelAssignment_1_2_4; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_2_4_0() { return cLevelAlternatives_1_2_4_0; }

		//"H"
		public Keyword getLevelHKeyword_1_2_4_0_0() { return cLevelHKeyword_1_2_4_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_2_4_0_1() { return cLevelLKeyword_1_2_4_0_1; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_2_5() { return cNameCommentAssignment_1_2_5; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_2_5_0() { return cNameCommentIDTerminalRuleCall_1_2_5_0; }

		//("\n" | "\r")?
		public Alternatives getAlternatives_1_2_6() { return cAlternatives_1_2_6; }

		//"\n"
		public Keyword getControl000aKeyword_1_2_6_0() { return cControl000aKeyword_1_2_6_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_2_6_1() { return cControl000dKeyword_1_2_6_1; }

		//"//@ @preStep " preStep=ID " "? level=("H" | "L")? name2=SYMBOLS? nameComment=ID? ("\n" | "\r")*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"//@ @preStep "
		public Keyword getPreStepKeyword_1_3_0() { return cPreStepKeyword_1_3_0; }

		//preStep=ID
		public Assignment getPreStepAssignment_1_3_1() { return cPreStepAssignment_1_3_1; }

		//ID
		public RuleCall getPreStepIDTerminalRuleCall_1_3_1_0() { return cPreStepIDTerminalRuleCall_1_3_1_0; }

		//" "?
		public Keyword getSpaceKeyword_1_3_2() { return cSpaceKeyword_1_3_2; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_3_3() { return cLevelAssignment_1_3_3; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_3_3_0() { return cLevelAlternatives_1_3_3_0; }

		//"H"
		public Keyword getLevelHKeyword_1_3_3_0_0() { return cLevelHKeyword_1_3_3_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_3_3_0_1() { return cLevelLKeyword_1_3_3_0_1; }

		//name2=SYMBOLS?
		public Assignment getName2Assignment_1_3_4() { return cName2Assignment_1_3_4; }

		//SYMBOLS
		public RuleCall getName2SYMBOLSParserRuleCall_1_3_4_0() { return cName2SYMBOLSParserRuleCall_1_3_4_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_3_5() { return cNameCommentAssignment_1_3_5; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_3_5_0() { return cNameCommentIDTerminalRuleCall_1_3_5_0; }

		//("\n" | "\r")*
		public Alternatives getAlternatives_1_3_6() { return cAlternatives_1_3_6; }

		//"\n"
		public Keyword getControl000aKeyword_1_3_6_0() { return cControl000aKeyword_1_3_6_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_3_6_1() { return cControl000dKeyword_1_3_6_1; }

		//"//@ @postStep " postStep=ID " "? level=("H" | "L")? name3=SYMBOLS? nameComment=ID? ("\n" | "\r")*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"//@ @postStep "
		public Keyword getPostStepKeyword_1_4_0() { return cPostStepKeyword_1_4_0; }

		//postStep=ID
		public Assignment getPostStepAssignment_1_4_1() { return cPostStepAssignment_1_4_1; }

		//ID
		public RuleCall getPostStepIDTerminalRuleCall_1_4_1_0() { return cPostStepIDTerminalRuleCall_1_4_1_0; }

		//" "?
		public Keyword getSpaceKeyword_1_4_2() { return cSpaceKeyword_1_4_2; }

		//level=("H" | "L")?
		public Assignment getLevelAssignment_1_4_3() { return cLevelAssignment_1_4_3; }

		//"H" | "L"
		public Alternatives getLevelAlternatives_1_4_3_0() { return cLevelAlternatives_1_4_3_0; }

		//"H"
		public Keyword getLevelHKeyword_1_4_3_0_0() { return cLevelHKeyword_1_4_3_0_0; }

		//"L"
		public Keyword getLevelLKeyword_1_4_3_0_1() { return cLevelLKeyword_1_4_3_0_1; }

		//name3=SYMBOLS?
		public Assignment getName3Assignment_1_4_4() { return cName3Assignment_1_4_4; }

		//SYMBOLS
		public RuleCall getName3SYMBOLSParserRuleCall_1_4_4_0() { return cName3SYMBOLSParserRuleCall_1_4_4_0; }

		//nameComment=ID?
		public Assignment getNameCommentAssignment_1_4_5() { return cNameCommentAssignment_1_4_5; }

		//ID
		public RuleCall getNameCommentIDTerminalRuleCall_1_4_5_0() { return cNameCommentIDTerminalRuleCall_1_4_5_0; }

		//("\n" | "\r")*
		public Alternatives getAlternatives_1_4_6() { return cAlternatives_1_4_6; }

		//"\n"
		public Keyword getControl000aKeyword_1_4_6_0() { return cControl000aKeyword_1_4_6_0; }

		//"\r"
		public Keyword getControl000dKeyword_1_4_6_1() { return cControl000dKeyword_1_4_6_1; }
	}

	public class KeyWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyWord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyWordAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cRule__BEGIN_DECLSKeyword_1_0_0 = (Keyword)cRuleAssignment_1_0.eContents().get(0);
		private final Keyword c__BEGIN_NAMESPACE_STDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword c__BEGIN_NAMESPACE_C99Keyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword c__END_DECLSKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword c__END_NAMESPACE_STDKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword c__END_NAMESPACE_C99Keyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword c__USING_NAMESPACE_STDKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cDefineKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cIfndefKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cUndefKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		private final Keyword cIfdefKeyword_1_10 = (Keyword)cAlternatives_1.eContents().get(10);
		private final Keyword cIfKeyword_1_11 = (Keyword)cAlternatives_1.eContents().get(11);
		private final Keyword cIncludeKeyword_1_12 = (Keyword)cAlternatives_1.eContents().get(12);
		private final Keyword cInclude_nextKeyword_1_13 = (Keyword)cAlternatives_1.eContents().get(13);
		private final Keyword cPragmaKeyword_1_14 = (Keyword)cAlternatives_1.eContents().get(14);
		private final Keyword cElseKeyword_1_15 = (Keyword)cAlternatives_1.eContents().get(15);
		private final Keyword cElifKeyword_1_16 = (Keyword)cAlternatives_1.eContents().get(16);
		private final Keyword cErrorKeyword_1_17 = (Keyword)cAlternatives_1.eContents().get(17);
		private final Keyword cTypedefKeyword_1_18 = (Keyword)cAlternatives_1.eContents().get(18);
		private final Keyword cClassKeyword_1_19 = (Keyword)cAlternatives_1.eContents().get(19);
		private final Keyword cEndifKeyword_1_20 = (Keyword)cAlternatives_1.eContents().get(20);
		private final Keyword cSourceKeyword_1_21 = (Keyword)cAlternatives_1.eContents().get(21);
		
		/// **
		// * @KeyWord :list of C/C++ keywords
		// * / KeyWord:
		//	{KeyWord} (rule="__BEGIN_DECLS" | "__BEGIN_NAMESPACE_STD" | "__BEGIN_NAMESPACE_C99" | "__END_DECLS" |
		//	"__END_NAMESPACE_STD" | "__END_NAMESPACE_C99" | "__USING_NAMESPACE_STD" | "define" | "ifndef" | "undef" | "ifdef" |
		//	"if" | "include" | "include_next" | "pragma" | "else" | "elif" | "error" | "typedef" | "class" | "endif" | "source");
		public ParserRule getRule() { return rule; }

		//{KeyWord} (rule="__BEGIN_DECLS" | "__BEGIN_NAMESPACE_STD" | "__BEGIN_NAMESPACE_C99" | "__END_DECLS" |
		//"__END_NAMESPACE_STD" | "__END_NAMESPACE_C99" | "__USING_NAMESPACE_STD" | "define" | "ifndef" | "undef" | "ifdef" |
		//"if" | "include" | "include_next" | "pragma" | "else" | "elif" | "error" | "typedef" | "class" | "endif" | "source")
		public Group getGroup() { return cGroup; }

		//{KeyWord}
		public Action getKeyWordAction_0() { return cKeyWordAction_0; }

		//rule="__BEGIN_DECLS" | "__BEGIN_NAMESPACE_STD" | "__BEGIN_NAMESPACE_C99" | "__END_DECLS" | "__END_NAMESPACE_STD" |
		//"__END_NAMESPACE_C99" | "__USING_NAMESPACE_STD" | "define" | "ifndef" | "undef" | "ifdef" | "if" | "include" |
		//"include_next" | "pragma" | "else" | "elif" | "error" | "typedef" | "class" | "endif" | "source"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//rule="__BEGIN_DECLS"
		public Assignment getRuleAssignment_1_0() { return cRuleAssignment_1_0; }

		//"__BEGIN_DECLS"
		public Keyword getRule__BEGIN_DECLSKeyword_1_0_0() { return cRule__BEGIN_DECLSKeyword_1_0_0; }

		//"__BEGIN_NAMESPACE_STD"
		public Keyword get__BEGIN_NAMESPACE_STDKeyword_1_1() { return c__BEGIN_NAMESPACE_STDKeyword_1_1; }

		//"__BEGIN_NAMESPACE_C99"
		public Keyword get__BEGIN_NAMESPACE_C99Keyword_1_2() { return c__BEGIN_NAMESPACE_C99Keyword_1_2; }

		//"__END_DECLS"
		public Keyword get__END_DECLSKeyword_1_3() { return c__END_DECLSKeyword_1_3; }

		//"__END_NAMESPACE_STD"
		public Keyword get__END_NAMESPACE_STDKeyword_1_4() { return c__END_NAMESPACE_STDKeyword_1_4; }

		//"__END_NAMESPACE_C99"
		public Keyword get__END_NAMESPACE_C99Keyword_1_5() { return c__END_NAMESPACE_C99Keyword_1_5; }

		//"__USING_NAMESPACE_STD"
		public Keyword get__USING_NAMESPACE_STDKeyword_1_6() { return c__USING_NAMESPACE_STDKeyword_1_6; }

		//"define"
		public Keyword getDefineKeyword_1_7() { return cDefineKeyword_1_7; }

		//"ifndef"
		public Keyword getIfndefKeyword_1_8() { return cIfndefKeyword_1_8; }

		//"undef"
		public Keyword getUndefKeyword_1_9() { return cUndefKeyword_1_9; }

		//"ifdef"
		public Keyword getIfdefKeyword_1_10() { return cIfdefKeyword_1_10; }

		//"if"
		public Keyword getIfKeyword_1_11() { return cIfKeyword_1_11; }

		//"include"
		public Keyword getIncludeKeyword_1_12() { return cIncludeKeyword_1_12; }

		//"include_next"
		public Keyword getInclude_nextKeyword_1_13() { return cInclude_nextKeyword_1_13; }

		//"pragma"
		public Keyword getPragmaKeyword_1_14() { return cPragmaKeyword_1_14; }

		//"else"
		public Keyword getElseKeyword_1_15() { return cElseKeyword_1_15; }

		//"elif"
		public Keyword getElifKeyword_1_16() { return cElifKeyword_1_16; }

		//"error"
		public Keyword getErrorKeyword_1_17() { return cErrorKeyword_1_17; }

		//"typedef"
		public Keyword getTypedefKeyword_1_18() { return cTypedefKeyword_1_18; }

		//"class"
		public Keyword getClassKeyword_1_19() { return cClassKeyword_1_19; }

		//"endif"
		public Keyword getEndifKeyword_1_20() { return cEndifKeyword_1_20; }

		//"source"
		public Keyword getSourceKeyword_1_21() { return cSourceKeyword_1_21; }
	}

	public class SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOLS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSYMBOLSAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSymbolsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cSymbolsCommaKeyword_1_0_0 = (Keyword)cSymbolsAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cFullStopFullStopFullStopKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cControl000cKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cSpaceKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cAsteriskKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cAsteriskSpaceKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		private final Keyword cRightSquareBracketKeyword_1_10 = (Keyword)cAlternatives_1.eContents().get(10);
		private final Keyword cControl000aKeyword_1_11 = (Keyword)cAlternatives_1.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_1_12 = (Keyword)cAlternatives_1.eContents().get(12);
		private final Keyword cRightParenthesisKeyword_1_13 = (Keyword)cAlternatives_1.eContents().get(13);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_14 = (Keyword)cAlternatives_1.eContents().get(14);
		private final Keyword cLessThanSignLessThanSignKeyword_1_15 = (Keyword)cAlternatives_1.eContents().get(15);
		private final Keyword cGreaterThanSignKeyword_1_16 = (Keyword)cAlternatives_1.eContents().get(16);
		private final Keyword cLessThanSignKeyword_1_17 = (Keyword)cAlternatives_1.eContents().get(17);
		private final Keyword cCircumflexAccentKeyword_1_18 = (Keyword)cAlternatives_1.eContents().get(18);
		private final Keyword cPlusSignKeyword_1_19 = (Keyword)cAlternatives_1.eContents().get(19);
		private final Keyword cHyphenMinusKeyword_1_20 = (Keyword)cAlternatives_1.eContents().get(20);
		private final Keyword cSolidusKeyword_1_21 = (Keyword)cAlternatives_1.eContents().get(21);
		private final RuleCall cBackSlashParserRuleCall_1_22 = (RuleCall)cAlternatives_1.eContents().get(22);
		private final Keyword cPercentSignKeyword_1_23 = (Keyword)cAlternatives_1.eContents().get(23);
		private final Keyword cVerticalLineKeyword_1_24 = (Keyword)cAlternatives_1.eContents().get(24);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_25 = (Keyword)cAlternatives_1.eContents().get(25);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_26 = (Keyword)cAlternatives_1.eContents().get(26);
		private final Keyword cEqualsSignKeyword_1_27 = (Keyword)cAlternatives_1.eContents().get(27);
		private final Keyword cQuestionMarkKeyword_1_28 = (Keyword)cAlternatives_1.eContents().get(28);
		private final Keyword cExclamationMarkKeyword_1_29 = (Keyword)cAlternatives_1.eContents().get(29);
		private final RuleCall cDoubleQuoteParserRuleCall_1_30 = (RuleCall)cAlternatives_1.eContents().get(30);
		private final RuleCall cSingleQuoteParserRuleCall_1_31 = (RuleCall)cAlternatives_1.eContents().get(31);
		private final Keyword cColonKeyword_1_32 = (Keyword)cAlternatives_1.eContents().get(32);
		private final Keyword cAmpersandKeyword_1_33 = (Keyword)cAlternatives_1.eContents().get(33);
		private final Keyword cTildeKeyword_1_34 = (Keyword)cAlternatives_1.eContents().get(34);
		private final Keyword cNumberSignKeyword_1_35 = (Keyword)cAlternatives_1.eContents().get(35);
		private final RuleCall cCURLY_OPENTerminalRuleCall_1_36 = (RuleCall)cAlternatives_1.eContents().get(36);
		private final RuleCall cCURLY_CLOSETerminalRuleCall_1_37 = (RuleCall)cAlternatives_1.eContents().get(37);
		private final RuleCall cINTTerminalRuleCall_1_38 = (RuleCall)cAlternatives_1.eContents().get(38);
		private final Assignment cName0Assignment_1_39 = (Assignment)cAlternatives_1.eContents().get(39);
		private final RuleCall cName0KeyWordParserRuleCall_1_39_0 = (RuleCall)cName0Assignment_1_39.eContents().get(0);
		
		/// **
		// * @SYMBOLS :all available C/C++ symbols
		// * / SYMBOLS:
		//	{SYMBOLS} (symbols+="," | "." | ".." | "..." | //don't know what this is, it is in math.h
		//	"\f" | ";" | " " | "*" | "* " | "[" | "]" | "\n" | "(" | ")" | ">>" | "<<" | ">" | "<" | "^" | "+" | "-" | "/" |
		//	BackSlash | "%" | "|" | "->" | "<-" | "=" | "?" | "!" | DoubleQuote | SingleQuote | ":" | "&" | "~" | "#" | CURLY_OPEN
		//	| CURLY_CLOSE | INT | name0= //used to bypass the reserved xText keyword source, source can be used a function call in C/C++ headers or source files
		//	KeyWord);
		public ParserRule getRule() { return rule; }

		//{SYMBOLS} (symbols+="," | "." | ".." | "..." | //don't know what this is, it is in math.h
		//"\f" | ";" | " " | "*" | "* " | "[" | "]" | "\n" | "(" | ")" | ">>" | "<<" | ">" | "<" | "^" | "+" | "-" | "/" |
		//BackSlash | "%" | "|" | "->" | "<-" | "=" | "?" | "!" | DoubleQuote | SingleQuote | ":" | "&" | "~" | "#" | CURLY_OPEN
		//| CURLY_CLOSE | INT | name0= //used to bypass the reserved xText keyword source, source can be used a function call in C/C++ headers or source files
		//KeyWord)
		public Group getGroup() { return cGroup; }

		//{SYMBOLS}
		public Action getSYMBOLSAction_0() { return cSYMBOLSAction_0; }

		//symbols+="," | "." | ".." | "..." | //don't know what this is, it is in math.h
		//"\f" | ";" | " " | "*" | "* " | "[" | "]" | "\n" | "(" | ")" | ">>" | "<<" | ">" | "<" | "^" | "+" | "-" | "/" |
		//BackSlash | "%" | "|" | "->" | "<-" | "=" | "?" | "!" | DoubleQuote | SingleQuote | ":" | "&" | "~" | "#" | CURLY_OPEN
		//| CURLY_CLOSE | INT | name0= //used to bypass the reserved xText keyword source, source can be used a function call in C/C++ headers or source files
		//KeyWord
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//symbols+=","
		public Assignment getSymbolsAssignment_1_0() { return cSymbolsAssignment_1_0; }

		//","
		public Keyword getSymbolsCommaKeyword_1_0_0() { return cSymbolsCommaKeyword_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_2() { return cFullStopFullStopKeyword_1_2; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_3() { return cFullStopFullStopFullStopKeyword_1_3; }

		////don't know what this is, it is in math.h
		//"\f"
		public Keyword getControl000cKeyword_1_4() { return cControl000cKeyword_1_4; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }

		//" "
		public Keyword getSpaceKeyword_1_6() { return cSpaceKeyword_1_6; }

		//"*"
		public Keyword getAsteriskKeyword_1_7() { return cAsteriskKeyword_1_7; }

		//"* "
		public Keyword getAsteriskSpaceKeyword_1_8() { return cAsteriskSpaceKeyword_1_8; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_9() { return cLeftSquareBracketKeyword_1_9; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_10() { return cRightSquareBracketKeyword_1_10; }

		//"\n"
		public Keyword getControl000aKeyword_1_11() { return cControl000aKeyword_1_11; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_12() { return cLeftParenthesisKeyword_1_12; }

		//")"
		public Keyword getRightParenthesisKeyword_1_13() { return cRightParenthesisKeyword_1_13; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_14() { return cGreaterThanSignGreaterThanSignKeyword_1_14; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_15() { return cLessThanSignLessThanSignKeyword_1_15; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_16() { return cGreaterThanSignKeyword_1_16; }

		//"<"
		public Keyword getLessThanSignKeyword_1_17() { return cLessThanSignKeyword_1_17; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_18() { return cCircumflexAccentKeyword_1_18; }

		//"+"
		public Keyword getPlusSignKeyword_1_19() { return cPlusSignKeyword_1_19; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_20() { return cHyphenMinusKeyword_1_20; }

		//"/"
		public Keyword getSolidusKeyword_1_21() { return cSolidusKeyword_1_21; }

		//BackSlash
		public RuleCall getBackSlashParserRuleCall_1_22() { return cBackSlashParserRuleCall_1_22; }

		//"%"
		public Keyword getPercentSignKeyword_1_23() { return cPercentSignKeyword_1_23; }

		//"|"
		public Keyword getVerticalLineKeyword_1_24() { return cVerticalLineKeyword_1_24; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_25() { return cHyphenMinusGreaterThanSignKeyword_1_25; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1_26() { return cLessThanSignHyphenMinusKeyword_1_26; }

		//"="
		public Keyword getEqualsSignKeyword_1_27() { return cEqualsSignKeyword_1_27; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_28() { return cQuestionMarkKeyword_1_28; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_29() { return cExclamationMarkKeyword_1_29; }

		//DoubleQuote
		public RuleCall getDoubleQuoteParserRuleCall_1_30() { return cDoubleQuoteParserRuleCall_1_30; }

		//SingleQuote
		public RuleCall getSingleQuoteParserRuleCall_1_31() { return cSingleQuoteParserRuleCall_1_31; }

		//":"
		public Keyword getColonKeyword_1_32() { return cColonKeyword_1_32; }

		//"&"
		public Keyword getAmpersandKeyword_1_33() { return cAmpersandKeyword_1_33; }

		//"~"
		public Keyword getTildeKeyword_1_34() { return cTildeKeyword_1_34; }

		//"#"
		public Keyword getNumberSignKeyword_1_35() { return cNumberSignKeyword_1_35; }

		//CURLY_OPEN
		public RuleCall getCURLY_OPENTerminalRuleCall_1_36() { return cCURLY_OPENTerminalRuleCall_1_36; }

		//CURLY_CLOSE
		public RuleCall getCURLY_CLOSETerminalRuleCall_1_37() { return cCURLY_CLOSETerminalRuleCall_1_37; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_38() { return cINTTerminalRuleCall_1_38; }

		//name0= //used to bypass the reserved xText keyword source, source can be used a function call in C/C++ headers or source files
		//KeyWord
		public Assignment getName0Assignment_1_39() { return cName0Assignment_1_39; }

		////used to bypass the reserved xText keyword source, source can be used a function call in C/C++ headers or source files
		//KeyWord
		public RuleCall getName0KeyWordParserRuleCall_1_39_0() { return cName0KeyWordParserRuleCall_1_39_0; }
	}

	public class StructDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cName0Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cName0SYMBOLSParserRuleCall_2_0 = (RuleCall)cName0Assignment_2.eContents().get(0);
		private final Assignment cName1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cName1IDTerminalRuleCall_3_0 = (RuleCall)cName1Assignment_3.eContents().get(0);
		private final RuleCall cCURLY_OPENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAttrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttrIDTerminalRuleCall_5_0 = (RuleCall)cAttrAssignment_5.eContents().get(0);
		private final RuleCall cCURLY_CLOSETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cName2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cName2SYMBOLSParserRuleCall_7_0 = (RuleCall)cName2Assignment_7.eContents().get(0);
		private final Assignment cName3Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cName3IDTerminalRuleCall_8_0 = (RuleCall)cName3Assignment_8.eContents().get(0);
		private final Assignment cName4Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cName4SYMBOLSParserRuleCall_9_0 = (RuleCall)cName4Assignment_9.eContents().get(0);
		
		/// **
		// * @StructDefinition :used for identifying structs
		// *                   :this is future work. This can be used in the future
		// *                   :when {} is removed as multiline comment and the body of 
		// *                   :the struct will be available
		// * / StructDefinition:
		//	"typedef " ID name0=SYMBOLS name1=ID CURLY_OPEN attr+=ID* CURLY_CLOSE name2=SYMBOLS name3=ID name4=SYMBOLS?;
		public ParserRule getRule() { return rule; }

		//"typedef " ID name0=SYMBOLS name1=ID CURLY_OPEN attr+=ID* CURLY_CLOSE name2=SYMBOLS name3=ID name4=SYMBOLS?
		public Group getGroup() { return cGroup; }

		//"typedef "
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//name0=SYMBOLS
		public Assignment getName0Assignment_2() { return cName0Assignment_2; }

		//SYMBOLS
		public RuleCall getName0SYMBOLSParserRuleCall_2_0() { return cName0SYMBOLSParserRuleCall_2_0; }

		//name1=ID
		public Assignment getName1Assignment_3() { return cName1Assignment_3; }

		//ID
		public RuleCall getName1IDTerminalRuleCall_3_0() { return cName1IDTerminalRuleCall_3_0; }

		//CURLY_OPEN
		public RuleCall getCURLY_OPENTerminalRuleCall_4() { return cCURLY_OPENTerminalRuleCall_4; }

		//attr+=ID*
		public Assignment getAttrAssignment_5() { return cAttrAssignment_5; }

		//ID
		public RuleCall getAttrIDTerminalRuleCall_5_0() { return cAttrIDTerminalRuleCall_5_0; }

		//CURLY_CLOSE
		public RuleCall getCURLY_CLOSETerminalRuleCall_6() { return cCURLY_CLOSETerminalRuleCall_6; }

		//name2=SYMBOLS
		public Assignment getName2Assignment_7() { return cName2Assignment_7; }

		//SYMBOLS
		public RuleCall getName2SYMBOLSParserRuleCall_7_0() { return cName2SYMBOLSParserRuleCall_7_0; }

		//name3=ID
		public Assignment getName3Assignment_8() { return cName3Assignment_8; }

		//ID
		public RuleCall getName3IDTerminalRuleCall_8_0() { return cName3IDTerminalRuleCall_8_0; }

		//name4=SYMBOLS?
		public Assignment getName4Assignment_9() { return cName4Assignment_9; }

		//SYMBOLS
		public RuleCall getName4SYMBOLSParserRuleCall_9_0() { return cName4SYMBOLSParserRuleCall_9_0; }
	}

	public class SingleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleQuote");
		private final RuleCall cMY_STRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// **
		// * @SingleQuote :declaration of ' and avoinding overriding the terminal STRING
		// * / SingleQuote:
		//	MY_STRING;
		public ParserRule getRule() { return rule; }

		//MY_STRING
		public RuleCall getMY_STRINGTerminalRuleCall() { return cMY_STRINGTerminalRuleCall; }
	}

	public class DoubleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleQuote");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLE_DQ_STRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * @DoubleQuote :declaration of " and avoinding overriding the terminal STRING
		// * / DoubleQuote:
		//	STRING | DOUBLE_DQ_STRING;
		public ParserRule getRule() { return rule; }

		//STRING | DOUBLE_DQ_STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//DOUBLE_DQ_STRING
		public RuleCall getDOUBLE_DQ_STRINGTerminalRuleCall_1() { return cDOUBLE_DQ_STRINGTerminalRuleCall_1; }
	}

	public class BackSlashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BackSlash");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMY_BACKSLASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * @BackSlash :declaration of \ and avoinding overriding the terminal STRING
		// * / BackSlash:
		//	STRING | MY_BACKSLASH;
		public ParserRule getRule() { return rule; }

		//STRING | MY_BACKSLASH
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//MY_BACKSLASH
		public RuleCall getMY_BACKSLASHTerminalRuleCall_1() { return cMY_BACKSLASHTerminalRuleCall_1; }
	}
	
	
	public class AnnotationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFunctionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFunctionFunctionKeyword_0_0 = (Keyword)cFunctionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cParameterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cParameterParameterKeyword_1_0 = (Keyword)cParameterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPreStepEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPreStepPreStepKeyword_2_0 = (Keyword)cPreStepEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPostStepEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPostStepPostStepKeyword_3_0 = (Keyword)cPostStepEnumLiteralDeclaration_3.eContents().get(0);
		
		/// **
		// * @AnnotationType :annotation types
		// *                 :annotations can addres whole functions or parameters of a function
		// * / enum AnnotationType:
		//	function | parameter | preStep | postStep;
		public EnumRule getRule() { return rule; }

		//function | parameter | preStep | postStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//function
		public EnumLiteralDeclaration getFunctionEnumLiteralDeclaration_0() { return cFunctionEnumLiteralDeclaration_0; }

		//"function"
		public Keyword getFunctionFunctionKeyword_0_0() { return cFunctionFunctionKeyword_0_0; }

		//parameter
		public EnumLiteralDeclaration getParameterEnumLiteralDeclaration_1() { return cParameterEnumLiteralDeclaration_1; }

		//"parameter"
		public Keyword getParameterParameterKeyword_1_0() { return cParameterParameterKeyword_1_0; }

		//preStep
		public EnumLiteralDeclaration getPreStepEnumLiteralDeclaration_2() { return cPreStepEnumLiteralDeclaration_2; }

		//"preStep"
		public Keyword getPreStepPreStepKeyword_2_0() { return cPreStepPreStepKeyword_2_0; }

		//postStep
		public EnumLiteralDeclaration getPostStepEnumLiteralDeclaration_3() { return cPostStepEnumLiteralDeclaration_3; }

		//"postStep"
		public Keyword getPostStepPostStepKeyword_3_0() { return cPostStepPostStepKeyword_3_0; }
	}

	public class FunctionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDeclassificationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDeclassificationDeclassificationKeyword_0_0 = (Keyword)cDeclassificationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSanitizationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSanitizationSanitizationKeyword_1_0 = (Keyword)cSanitizationEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSinkEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSinkSinkKeyword_2_0 = (Keyword)cSinkEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSourceEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSourceSourceKeyword_3_0 = (Keyword)cSourceEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTrust_boundaryEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTrust_boundaryTrust_boundaryKeyword_4_0 = (Keyword)cTrust_boundaryEnumLiteralDeclaration_4.eContents().get(0);
		
		/// **
		// * @FunctionType :annotaions types for functions
		// * / enum FunctionType:
		//	declassification | sanitization | sink | source | trust_boundary;
		public EnumRule getRule() { return rule; }

		//declassification | sanitization | sink | source | trust_boundary
		public Alternatives getAlternatives() { return cAlternatives; }

		//declassification
		public EnumLiteralDeclaration getDeclassificationEnumLiteralDeclaration_0() { return cDeclassificationEnumLiteralDeclaration_0; }

		//"declassification"
		public Keyword getDeclassificationDeclassificationKeyword_0_0() { return cDeclassificationDeclassificationKeyword_0_0; }

		//sanitization
		public EnumLiteralDeclaration getSanitizationEnumLiteralDeclaration_1() { return cSanitizationEnumLiteralDeclaration_1; }

		//"sanitization"
		public Keyword getSanitizationSanitizationKeyword_1_0() { return cSanitizationSanitizationKeyword_1_0; }

		//sink
		public EnumLiteralDeclaration getSinkEnumLiteralDeclaration_2() { return cSinkEnumLiteralDeclaration_2; }

		//"sink"
		public Keyword getSinkSinkKeyword_2_0() { return cSinkSinkKeyword_2_0; }

		//source
		public EnumLiteralDeclaration getSourceEnumLiteralDeclaration_3() { return cSourceEnumLiteralDeclaration_3; }

		//"source"
		public Keyword getSourceSourceKeyword_3_0() { return cSourceSourceKeyword_3_0; }

		//trust_boundary
		public EnumLiteralDeclaration getTrust_boundaryEnumLiteralDeclaration_4() { return cTrust_boundaryEnumLiteralDeclaration_4; }

		//"trust_boundary"
		public Keyword getTrust_boundaryTrust_boundaryKeyword_4_0() { return cTrust_boundaryTrust_boundaryKeyword_4_0; }
	}

	public class SecurityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SecurityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cConfidentialEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cConfidentialConfidentialKeyword_0_0 = (Keyword)cConfidentialEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSensitiveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSensitiveSensitiveKeyword_1_0 = (Keyword)cSensitiveEnumLiteralDeclaration_1.eContents().get(0);
		
		/// **
		// * @SecurityType :annotations types for parameters
		// * / enum SecurityType:
		//	confidential | sensitive;
		public EnumRule getRule() { return rule; }

		//confidential | sensitive
		public Alternatives getAlternatives() { return cAlternatives; }

		//confidential
		public EnumLiteralDeclaration getConfidentialEnumLiteralDeclaration_0() { return cConfidentialEnumLiteralDeclaration_0; }

		//"confidential"
		public Keyword getConfidentialConfidentialKeyword_0_0() { return cConfidentialConfidentialKeyword_0_0; }

		//sensitive
		public EnumLiteralDeclaration getSensitiveEnumLiteralDeclaration_1() { return cSensitiveEnumLiteralDeclaration_1; }

		//"sensitive"
		public Keyword getSensitiveSensitiveKeyword_1_0() { return cSensitiveSensitiveKeyword_1_0; }
	}
	
	private AnnotationLanguageElements pAnnotationLanguage;
	private HeaderModelElements pHeaderModel;
	private AttributeDefinitionElements pAttributeDefinition;
	private ExpressionAttributeElements pExpressionAttribute;
	private MethodHeaderElements pMethodHeader;
	private ExpressionElements pExpression;
	private EntityRefElements pEntityRef;
	private IDSpaceElements pIDSpace;
	private SpecialExpressionElements pSpecialExpression;
	private SpaceIDElements pSpaceID;
	private MultilineAnnotationElements pMultilineAnnotation;
	private FunctionAnnotationElements pFunctionAnnotation;
	private SingleLineAnnotationElements pSingleLineAnnotation;
	private AnnotationTypeElements unknownRuleAnnotationType;
	private FunctionTypeElements unknownRuleFunctionType;
	private SecurityTypeElements unknownRuleSecurityType;
	private KeyWordElements pKeyWord;
	private SYMBOLSElements pSYMBOLS;
	private StructDefinitionElements pStructDefinition;
	private SingleQuoteElements pSingleQuote;
	private DoubleQuoteElements pDoubleQuote;
	private BackSlashElements pBackSlash;
	private TerminalRule tMY_BACKSLASH;
	private TerminalRule tDOUBLE_DQ_STRING;
	private TerminalRule tDOUBLE_SQ_STRING;
	private TerminalRule tCURLY_OPEN;
	private TerminalRule tCURLY_CLOSE;
	private TerminalRule tMY_STRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tML_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// **
	// * @AnnotationLanguage: top root node of the annotation language
	// * / AnnotationLanguage:
	//	element+=HeaderModel*;
	public AnnotationLanguageElements getAnnotationLanguageAccess() {
		return (pAnnotationLanguage != null) ? pAnnotationLanguage : (pAnnotationLanguage = new AnnotationLanguageElements());
	}
	
	public ParserRule getAnnotationLanguageRule() {
		return getAnnotationLanguageAccess().getRule();
	}

	/// **
	// * @SingleLineAnnotation: entity used for single line annotations
	// * @MultilineAnnotation : entity used for multi line annotations
	// * @MethodHeader        : entity used for recognizing anykind of C/C++ headers
	// * @AttributeDefinition : entity used for recognizing anykind of variable definition
	// * / HeaderModel:
	//	headers+=SingleLineAnnotation | MultilineAnnotation | MethodHeader | AttributeDefinition;
	public HeaderModelElements getHeaderModelAccess() {
		return (pHeaderModel != null) ? pHeaderModel : (pHeaderModel = new HeaderModelElements());
	}
	
	public ParserRule getHeaderModelRule() {
		return getHeaderModelAccess().getRule();
	}

	/// **
	// * @AttributeDefinition : entity used for recognizing anykind of statement which begins with the simbol #
	// * / AttributeDefinition:
	//	{AttributeDefinition} (attribute_def+=SYMBOLS? " "* extension+=KeyWord extension_2+=ExpressionAttribute) ("\n" |
	//	"\r")*;
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return (pAttributeDefinition != null) ? pAttributeDefinition : (pAttributeDefinition = new AttributeDefinitionElements());
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}

	/// **
	// * @ExpressionAttribute : atribute of the AttributeDefinition
	// * / ExpressionAttribute returns Ref:
	//	EntityRef ({Expression.ref=current} symbols_attr+=SYMBOLS tail=EntityRef)*;
	public ExpressionAttributeElements getExpressionAttributeAccess() {
		return (pExpressionAttribute != null) ? pExpressionAttribute : (pExpressionAttribute = new ExpressionAttributeElements());
	}
	
	public ParserRule getExpressionAttributeRule() {
		return getExpressionAttributeAccess().getRule();
	}

	/// **
	// * @MethodHeader :this recognizes anykind of method headers
	// * / MethodHeader:
	//	{MethodHeader} ((name0=SYMBOLS? (" "? "*"* " "* ID " "?)* name1=SYMBOLS exp+=Expression name2=SYMBOLS) (name3=SYMBOLS?
	//	ID? name4=SYMBOLS? ID? name5=SYMBOLS? ID?) name6=SYMBOLS?) ("\n" | "\r")?;
	public MethodHeaderElements getMethodHeaderAccess() {
		return (pMethodHeader != null) ? pMethodHeader : (pMethodHeader = new MethodHeaderElements());
	}
	
	public ParserRule getMethodHeaderRule() {
		return getMethodHeaderAccess().getRule();
	}

	/// **
	// * @Expression :used for recognizing expresions inside a MethodHeader
	// *               :it contains one recursion on the current
	// * / Expression returns Ref:
	//	EntityRef ({Expression.ref=current} symbols+=SYMBOLS tail=EntityRef)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	/// **
	// * @EntityRef :@Expression contains @EntityRef, this is a list of entitys
	// * / EntityRef returns Ref:
	//	{EntityRef} entity+=SpecialExpression*;
	public EntityRefElements getEntityRefAccess() {
		return (pEntityRef != null) ? pEntityRef : (pEntityRef = new EntityRefElements());
	}
	
	public ParserRule getEntityRefRule() {
		return getEntityRefAccess().getRule();
	}

	/// **
	// * @IDSpace :contains a left recursion on the currrent
	// *          :used for identityfing expressions with a space in front
	// * / IDSpace:
	//	EntityRef ({IDSpace.left=current} " "* right=SpecialExpression)*;
	public IDSpaceElements getIDSpaceAccess() {
		return (pIDSpace != null) ? pIDSpace : (pIDSpace = new IDSpaceElements());
	}
	
	public ParserRule getIDSpaceRule() {
		return getIDSpaceAccess().getRule();
	}

	/// **
	// * @SpecialExpression :expressions containing stars
	// * / SpecialExpression:
	//	{Entity} (rules+=ID | "**" name0=SYMBOLS? ID? | name1=SYMBOLS name2=SYMBOLS? name3=SYMBOLS? name4=SYMBOLS? ID? | INT);
	public SpecialExpressionElements getSpecialExpressionAccess() {
		return (pSpecialExpression != null) ? pSpecialExpression : (pSpecialExpression = new SpecialExpressionElements());
	}
	
	public ParserRule getSpecialExpressionRule() {
		return getSpecialExpressionAccess().getRule();
	}

	/// **
	// * @SpaceID :used for recognizing spaces followed be ID
	// * / SpaceID:
	//	{SpaceID} (expr+=" "* ID?)*;
	public SpaceIDElements getSpaceIDAccess() {
		return (pSpaceID != null) ? pSpaceID : (pSpaceID = new SpaceIDElements());
	}
	
	public ParserRule getSpaceIDRule() {
		return getSpaceIDAccess().getRule();
	}

	/// **
	// * @MultilineAnnotation :used for adding multiline annotations
	// * / MultilineAnnotation:
	//	{MultilineAnnotation} (rule+="/ *@ "? "* "? functionAnnotation=FunctionAnnotation "\n"? " @* /"? name0=SYMBOLS? | "*"
	//	" " " " "@* /" name1=SYMBOLS? ("\n" | "\r")?);
	public MultilineAnnotationElements getMultilineAnnotationAccess() {
		return (pMultilineAnnotation != null) ? pMultilineAnnotation : (pMultilineAnnotation = new MultilineAnnotationElements());
	}
	
	public ParserRule getMultilineAnnotationRule() {
		return getMultilineAnnotationAccess().getRule();
	}

	/// **
	// * @FunctionAnnotation :used for function annotations
	// * / FunctionAnnotation:
	//	{FunctionAnnotation} (result+="@function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS?
	//	nameComment=ID? ("\n" | "\r")? // supported without space before confidential and sensitive
	//	//for annotating pre and post functions
	//	| "@parameter " parameter=ID name0=SYMBOLS? securityType=SecurityType? " "? level=("H" | "L")? name1=SYMBOLS?
	//	nameComment=ID? ("\n" | "\r")? | "@preStep " preStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name2=SYMBOLS?
	//	nameComment=ID? ("\n" | "\r")? | "@postStep " postStep=ID name0=SYMBOLS? " "? level=("H" | "L")? name3=SYMBOLS?
	//	nameComment=ID? ("\n" | "\r")?);
	public FunctionAnnotationElements getFunctionAnnotationAccess() {
		return (pFunctionAnnotation != null) ? pFunctionAnnotation : (pFunctionAnnotation = new FunctionAnnotationElements());
	}
	
	public ParserRule getFunctionAnnotationRule() {
		return getFunctionAnnotationAccess().getRule();
	}

	/// **
	// * @SingleLineAnnotation :used for adding single line annotations
	// * / SingleLineAnnotation:
	//	{SingleLineAnnotation} (result+="//@ @function " functionType=FunctionType " "? level=("H" | "L")? name0=SYMBOLS?
	//	nameComment=ID? ("\n" | "\r")* // supported without space before confidential and sensitive
	//	//for annotating pre and post functions
	//	| "//@ @parameter " parameter=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
	//	"//@ @variable " variable=ID securityType=SecurityType? " "? level=("H" | "L")? nameComment=ID? ("\n" | "\r")? |
	//	"//@ @preStep " preStep=ID " "? level=("H" | "L")? name2=SYMBOLS? nameComment=ID? ("\n" | "\r")* | "//@ @postStep "
	//	postStep=ID " "? level=("H" | "L")? name3=SYMBOLS? nameComment=ID? ("\n" | "\r")*);
	public SingleLineAnnotationElements getSingleLineAnnotationAccess() {
		return (pSingleLineAnnotation != null) ? pSingleLineAnnotation : (pSingleLineAnnotation = new SingleLineAnnotationElements());
	}
	
	public ParserRule getSingleLineAnnotationRule() {
		return getSingleLineAnnotationAccess().getRule();
	}

	/// **
	// * @AnnotationType :annotation types
	// *                 :annotations can addres whole functions or parameters of a function
	// * / enum AnnotationType:
	//	function | parameter | preStep | postStep;
	public AnnotationTypeElements getAnnotationTypeAccess() {
		return (unknownRuleAnnotationType != null) ? unknownRuleAnnotationType : (unknownRuleAnnotationType = new AnnotationTypeElements());
	}
	
	public EnumRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}

	/// **
	// * @FunctionType :annotaions types for functions
	// * / enum FunctionType:
	//	declassification | sanitization | sink | source | trust_boundary;
	public FunctionTypeElements getFunctionTypeAccess() {
		return (unknownRuleFunctionType != null) ? unknownRuleFunctionType : (unknownRuleFunctionType = new FunctionTypeElements());
	}
	
	public EnumRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}

	/// **
	// * @SecurityType :annotations types for parameters
	// * / enum SecurityType:
	//	confidential | sensitive;
	public SecurityTypeElements getSecurityTypeAccess() {
		return (unknownRuleSecurityType != null) ? unknownRuleSecurityType : (unknownRuleSecurityType = new SecurityTypeElements());
	}
	
	public EnumRule getSecurityTypeRule() {
		return getSecurityTypeAccess().getRule();
	}

	/// **
	// * @KeyWord :list of C/C++ keywords
	// * / KeyWord:
	//	{KeyWord} (rule="__BEGIN_DECLS" | "__BEGIN_NAMESPACE_STD" | "__BEGIN_NAMESPACE_C99" | "__END_DECLS" |
	//	"__END_NAMESPACE_STD" | "__END_NAMESPACE_C99" | "__USING_NAMESPACE_STD" | "define" | "ifndef" | "undef" | "ifdef" |
	//	"if" | "include" | "include_next" | "pragma" | "else" | "elif" | "error" | "typedef" | "class" | "endif" | "source");
	public KeyWordElements getKeyWordAccess() {
		return (pKeyWord != null) ? pKeyWord : (pKeyWord = new KeyWordElements());
	}
	
	public ParserRule getKeyWordRule() {
		return getKeyWordAccess().getRule();
	}

	/// **
	// * @SYMBOLS :all available C/C++ symbols
	// * / SYMBOLS:
	//	{SYMBOLS} (symbols+="," | "." | ".." | "..." | //don't know what this is, it is in math.h
	//	"\f" | ";" | " " | "*" | "* " | "[" | "]" | "\n" | "(" | ")" | ">>" | "<<" | ">" | "<" | "^" | "+" | "-" | "/" |
	//	BackSlash | "%" | "|" | "->" | "<-" | "=" | "?" | "!" | DoubleQuote | SingleQuote | ":" | "&" | "~" | "#" | CURLY_OPEN
	//	| CURLY_CLOSE | INT | name0= //used to bypass the reserved xText keyword source, source can be used a function call in C/C++ headers or source files
	//	KeyWord);
	public SYMBOLSElements getSYMBOLSAccess() {
		return (pSYMBOLS != null) ? pSYMBOLS : (pSYMBOLS = new SYMBOLSElements());
	}
	
	public ParserRule getSYMBOLSRule() {
		return getSYMBOLSAccess().getRule();
	}

	/// **
	// * @StructDefinition :used for identifying structs
	// *                   :this is future work. This can be used in the future
	// *                   :when {} is removed as multiline comment and the body of 
	// *                   :the struct will be available
	// * / StructDefinition:
	//	"typedef " ID name0=SYMBOLS name1=ID CURLY_OPEN attr+=ID* CURLY_CLOSE name2=SYMBOLS name3=ID name4=SYMBOLS?;
	public StructDefinitionElements getStructDefinitionAccess() {
		return (pStructDefinition != null) ? pStructDefinition : (pStructDefinition = new StructDefinitionElements());
	}
	
	public ParserRule getStructDefinitionRule() {
		return getStructDefinitionAccess().getRule();
	}

	/// **
	// * @SingleQuote :declaration of ' and avoinding overriding the terminal STRING
	// * / SingleQuote:
	//	MY_STRING;
	public SingleQuoteElements getSingleQuoteAccess() {
		return (pSingleQuote != null) ? pSingleQuote : (pSingleQuote = new SingleQuoteElements());
	}
	
	public ParserRule getSingleQuoteRule() {
		return getSingleQuoteAccess().getRule();
	}

	/// **
	// * @DoubleQuote :declaration of " and avoinding overriding the terminal STRING
	// * / DoubleQuote:
	//	STRING | DOUBLE_DQ_STRING;
	public DoubleQuoteElements getDoubleQuoteAccess() {
		return (pDoubleQuote != null) ? pDoubleQuote : (pDoubleQuote = new DoubleQuoteElements());
	}
	
	public ParserRule getDoubleQuoteRule() {
		return getDoubleQuoteAccess().getRule();
	}

	/// **
	// * @BackSlash :declaration of \ and avoinding overriding the terminal STRING
	// * / BackSlash:
	//	STRING | MY_BACKSLASH;
	public BackSlashElements getBackSlashAccess() {
		return (pBackSlash != null) ? pBackSlash : (pBackSlash = new BackSlashElements());
	}
	
	public ParserRule getBackSlashRule() {
		return getBackSlashAccess().getRule();
	}

	/// **
	// * @MY_BACKSLASH :double backslash
	// * / terminal MY_BACKSLASH:
	//	"\\";
	public TerminalRule getMY_BACKSLASHRule() {
		return (tMY_BACKSLASH != null) ? tMY_BACKSLASH : (tMY_BACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MY_BACKSLASH"));
	} 

	/// **
	// * @DQ_STRING :double quote declaration
	// * / terminal DOUBLE_DQ_STRING:
	//	"\'\"\' ~(\'\"\')* \'\"\'";
	public TerminalRule getDOUBLE_DQ_STRINGRule() {
		return (tDOUBLE_DQ_STRING != null) ? tDOUBLE_DQ_STRING : (tDOUBLE_DQ_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE_DQ_STRING"));
	} 

	/// **
	// * @SQ_STRING :single quote declaration
	// * / terminal DOUBLE_SQ_STRING:
	//	"\'\'\' ~(\'\'\')* \'\'\'";
	public TerminalRule getDOUBLE_SQ_STRINGRule() {
		return (tDOUBLE_SQ_STRING != null) ? tDOUBLE_SQ_STRING : (tDOUBLE_SQ_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE_SQ_STRING"));
	} 

	/// **
	// * @CURLY_OPEN :open curly bracket declaration
	// * / terminal CURLY_OPEN:
	//	"{";
	public TerminalRule getCURLY_OPENRule() {
		return (tCURLY_OPEN != null) ? tCURLY_OPEN : (tCURLY_OPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CURLY_OPEN"));
	} 

	/// **
	// * @CURLY_CLOSE :close curly bracket declaration
	// * / terminal CURLY_CLOSE:
	//	"}";
	public TerminalRule getCURLY_CLOSERule() {
		return (tCURLY_CLOSE != null) ? tCURLY_CLOSE : (tCURLY_CLOSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CURLY_CLOSE"));
	} 

	/// **
	// * @MY_STRING :modified string terminals, it allows anykind of symbols inside the single and double quotations \
	// * / terminal MY_STRING:
	//	"\"" ("\\" | !("\\" | "\""))* "\"" | "\'" ("\\" | !("\\" | "\'"))* "\'";
	public TerminalRule getMY_STRINGRule() {
		return (tMY_STRING != null) ? tMY_STRING : (tMY_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MY_STRING"));
	} 

	/// **
	// * @SL_COMMENT :all strings which follow // | || | } will be a single line comment
	// * / // '}' can be used optional to disable the method bodyes together with multiline line {} comment 
	////     | '}'         !('\n'|'\r')* ('\n'|'\r')*               
	//terminal SL_COMMENT:
	//	"//" !"@" !("\n" | "\r")* ("\n" | "\r")*;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	/// **
	// * @ML_COMMENT :@/ * multiline comment excluding @ from inside
	//  *            :{} multi line comment 
	// * / // '{' -> '}' can be used optional to disable the method bodyes together with single line { comment 
	////      | '{' -> '}'                   ('\n'|'\r')?
	//terminal ML_COMMENT:
	//	"/ *" !"@"->!"@" "* /" !("\n" | "\r")* ("\n" | "\r")*;
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
